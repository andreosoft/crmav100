{"remainingRequest":"/home/andrei/dev/vue/crmav100/node_modules/babel-loader/lib/index.js!/home/andrei/dev/vue/crmav100/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/andrei/dev/vue/crmav100/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrei/dev/vue/crmav100/src/views/signup/login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrei/dev/vue/crmav100/src/views/signup/login.vue","mtime":1552325703850},{"path":"/home/andrei/dev/vue/crmav100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport model from '@/models/login';\nimport api from '@/config/api';\nimport axios from 'axios';\nimport Vue from 'vue';\nimport mixingValidator from '@/libs/validators';\nexport default {\n  mixins: [mixingValidator],\n  data: function data() {\n    return {\n      loading: false,\n      labels: model.labels,\n      fields: new model.Fields().fields,\n      errors: new model.Fields().fields\n    };\n  },\n  methods: {\n    submitForm: function submitForm() {\n      if (this.validateAll(this.fields)) {\n        this.submit();\n      }\n    },\n    submit: function submit() {\n      var _this = this;\n\n      this.$store.dispatch('auth/login', {\n        login: this.fields.login,\n        password: this.fields.password\n      }).then(function () {\n        _this.$router.push('/');\n      }).catch(function (e) {\n        _this.error = e;\n      });\n    },\n    validateAll: function validateAll(fields) {\n      var noerror = true;\n\n      for (var index in fields) {\n        if (this.validate(index, fields[index])) {\n          noerror = false;\n        }\n      }\n\n      return noerror;\n    },\n    validate: function validate(field, value) {\n      return this.errors[field] = this.validator(model.validators[field], value);\n    }\n  }\n};",{"version":3,"sources":["login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAA,KAAA,MAAA,gBAAA;AACA,OAAA,GAAA,MAAA,cAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,GAAA,MAAA,KAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,eAAA,CADA;AAEA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,KADA;AAEA,MAAA,MAAA,EAAA,KAAA,CAAA,MAFA;AAGA,MAAA,MAAA,EAAA,IAAA,KAAA,CAAA,MAAA,GAAA,MAHA;AAIA,MAAA,MAAA,EAAA,IAAA,KAAA,CAAA,MAAA,GAAA;AAJA,KAAA;AAMA,GATA;AAUA,EAAA,OAAA,EAAA;AACA,IAAA,UAAA,EAAA,sBAAA;AACA,UAAA,KAAA,WAAA,CAAA,KAAA,MAAA,CAAA,EAAA;AACA,aAAA,MAAA;AACA;AACA,KALA;AAMA,IAAA,MAAA,EAAA,kBAAA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,YAAA,EAAA;AAAA,QAAA,KAAA,EAAA,KAAA,MAAA,CAAA,KAAA;AAAA,QAAA,QAAA,EAAA,KAAA,MAAA,CAAA;AAAA,OAAA,EACA,IADA,CACA,YAAA;AACA,QAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA;AACA,OAHA,EAIA,KAJA,CAIA,UAAA,CAAA,EAAA;AAAA,QAAA,KAAA,CAAA,KAAA,GAAA,CAAA;AAAA,OAJA;AAKA,KAZA;AAaA,IAAA,WAAA,EAAA,qBAAA,MAAA,EAAA;AACA,UAAA,OAAA,GAAA,IAAA;;AACA,WAAA,IAAA,KAAA,IAAA,MAAA,EAAA;AACA,YAAA,KAAA,QAAA,CAAA,KAAA,EAAA,MAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AACA,UAAA,OAAA,GAAA,KAAA;AACA;AACA;;AACA,aAAA,OAAA;AACA,KArBA;AAsBA,IAAA,QAAA,EAAA,kBAAA,KAAA,EAAA,KAAA,EAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,IAAA,KAAA,SAAA,CAAA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA;AACA;AAxBA;AAVA,CAAA","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-10 col-md-8  col-lg-5 text-center\" style=\"margin: 0 auto;\">\n        <h2 style=\"color:#fff\">{{$root.appName}}</h2>\n        <div class=\"login-panel\">\n          <div v-if=\"this.$store.getters['auth/status'] == 'loading'\" class=\"loading-block\">\n            <div class=\"loader\"></div>\n          </div>\n          <div>\n            <h3>Войти</h3>\n            <hr>\n            <form class=\"login\" @submit.prevent=\"submitForm\" method=\"post\" action=\"\">\n              <p v-if=\"this.$store.getters['auth/status'] == 'error'\" style=\"color: red\">{{ this.$store.getters['auth/error'] }}</p>\n              <div class=\"form-group\">\n                <input class=\"form-control form-control-lg\" :class=\"{'is-invalid': errors.login}\" @change=\"validate('login', fields.login)\" v-model=\"fields.login\" type=\"text\" :placeholder=\"labels.login\">\n                <div v-if=\"errors.login\" class=\"invalid-feedback\">{{errors.login}}</div>\n              </div>\n              <div class=\"form-group\">\n                <input class=\"form-control form-control-lg\" :class=\"{'is-invalid': errors.password}\" @change=\"validate('password', fields.password)\" v-model=\"fields.password\" type=\"password\" :placeholder=\"labels.password\">\n                <div v-if=\"errors.password\" class=\"invalid-feedback\">{{errors.password}}</div>\n              </div>\n              <!-- <div class=\"text-right\">\n                <router-link :to=\"{ name: 'forget' }\">напомнить пароль</router-link>\n              </div> -->\n              <div>\n                <button type=\"submit\" class=\"btn btn btn-outline-success btn-lg\" style=\"width: 100%;\">Войти</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport model from '@/models/login'\nimport api from '@/config/api'\nimport axios from 'axios'\nimport Vue from 'vue'\nimport mixingValidator from '@/libs/validators'\n\nexport default {\n  mixins: [mixingValidator],\n  data: function() {\n    return {\n      loading: false,\n      labels: model.labels,\n      fields: new model.Fields().fields,\n      errors: new model.Fields().fields\n    }\n  },\n  methods: {\n    submitForm: function () {\n      if (this.validateAll(this.fields)) {\n        this.submit()\n      }\n    },\n    submit: function() {\n      this.$store.dispatch('auth/login', { login: this.fields.login, password: this.fields.password })\n        .then(() => {\n          this.$router.push('/')\n        })\n        .catch(e => {this.error = e})\n    },\n    validateAll: function(fields) {\n      var noerror = true;\n      for (var index in fields) {\n        if (this.validate(index, fields[index])) {\n          noerror = false\n        }\n      }\n      return noerror\n    },\n    validate: function (field, value) {\n      return this.errors[field] = this.validator(model.validators[field], value)\n    }\n  }\n\n}\n</script>\n"],"sourceRoot":"src/views/signup"}]}