{"remainingRequest":"/home/andrei/dev/vue/crmav100/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrei/dev/vue/crmav100/src/views/req_av100/form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrei/dev/vue/crmav100/src/views/req_av100/form.vue","mtime":1555432139978},{"path":"/home/andrei/dev/vue/crmav100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BaseText from '@/widgets/inputs/BaseText.vue'\nimport BaseTextarea from '@/widgets/inputs/BaseTextarea.vue'\nimport BaseSelect from '@/widgets/inputs/BaseSelect.vue'\nimport model from '@/models/request_av100.js'\nimport axios from 'axios'\nimport api from '@/config/api'\nimport router from '@/config/router'\nimport mixingValidator from '@/libs/validators'\n\nfunction fallbackCopyTextToClipboard(text) {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Fallback: Copying text command was ' + msg);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n}\n\nexport default {\n  mixins: [mixingValidator],\n  components: {\n    'v-text': BaseText,\n    'v-textarea': BaseTextarea,\n    'v-select': BaseSelect\n  },\n  data: function() {\n    return {\n      model: model,\n      validators: model.validators,\n      labels: model.labels,\n      fields: new model.Fields().fields,\n      errors: new model.Fields().errors,\n      fields_info: new model.FieldsGet().fields,\n      text_info: '',\n      salekey: null,\n      fields_about: null,\n      api: api.av100\n    }\n  },\n  created() {\n    this.genNew()\n  },\n  computed: {\n    key: function() {\n      return this.$store.getters['user/profile'].api_key\n    }\n  },\n  methods: {\n    addClipboard: function(text) {\n      if (!navigator.clipboard) {\n        fallbackCopyTextToClipboard(text);\n        return false;\n      }\n      navigator.clipboard.writeText(text).then(function() {\n        console.log('Async: Copying to clipboard was successful!');\n      }, function(err) {\n        console.error('Async: Could not copy text: ', err);\n      });\n      return false;\n    },\n    genNew: function() {\n      this.fields = new model.Fields().fields\n      this.errors = new model.Fields().errors\n      this.fields_about = null\n      return new Promise((resolve, reject) => {\n        this.getTextInfo()\n        this.fetchData().then(() => { this.getKey().then(() => { this.getAbout().then(()=> { resolve(\"ok\") })  }) })\n      })\n    },\n    getTextInfo: function() {\n      axios\n      .get(api.content, {params: {id: '2' }})\n      .then(response => { this.text_info = response.data.data.content})\n      .catch(error => { console.log(error) })\n    },\n    submitAndNext: function() {\n      if (this.validateAll(this.fields)) {\n        this.sendRequest().then(() => {this.genNew()})\n      }\n      \n    },\n    submitAndExit: function() {\n      if (this.validateAll(this.fields)) {\n        this.sendRequest().then(() => {router.push({ name: 'index' })})\n      }\n    },\n    submitAndCall: function() {\n      if (this.validateAll(this.fields)) {\n        this.sendRequest().then(() => {this.genNew().then(() => { this.$root.$emit('global-call') })})\n      }\n    },\n    fetchData () {\n      return new Promise((resolve, reject) => {\n        this.loading = true\n        axios\n        .get(this.api, {params: {key: this.key, method: 'getsale'} })\n        .then(response => { resolve(\"ok\") })\n        .catch(error => { console.log(error) })\n      })\n    },\n    sendSMS: function() {\n      axios\n        .get(this.api, {params: {key: this.key, method: 'sendsms', salekey: this.salekey} })\n        .then(response => { if (response.data.error) { alert(response.data.msg)}})\n        .catch(error => { console.log(error) })\n    },\n    sendTelegam: function() {\n      axios\n        .get(this.api, {params: {key: this.key, method: 'sendtlg'} })\n        .then(response => { if (response.data.error) { alert(response.data.msg)}})\n        .catch(error => { console.log(error) })\n    },\n    sendRequest: function() {\n      return new Promise((resolve, reject) => {\n        this.loading = true\n        var params = {\n            key: this.key, \n            method: 'process',\n            salekey: this.salekey,\n            salestate: this.fields.salestate,\n            callState:this.fields.callState,\n            notifytype: this.fields.notifytype.join(),\n            clienttype: this.fields.clienttype,\n            comment: this.fields.comment\n            }\n            // console.log(params.notifytype);\n            \n        axios\n          .get(this.api, {params: params})\n          .then(response => { \n            this.loading = false\n            if (response.data.error) { alert(response.data.msg)} \n            else { resolve(\"ok\")  }\n          })\n          .catch(error => { console.log(error) })\n      })\n    },\n    getAbout: function() {\n      return new Promise((resolve, reject) => {\n        this.loading = true\n        axios\n        .get(this.api, {params: {key: this.key, method: 'item', salekey: this.salekey} })\n        .then(response => {\n          this.loading = false\n          if (!response.data.error) {\n            this.fields_about = response.data\n            resolve(\"ok\") \n          }               \n        })\n        .catch(error => { console.log(error) })\n      })\n    },\n    getKey: function() {\n      return new Promise((resolve, reject) => {\n        this.loading = true\n        axios\n        .get(this.api, {params: {key: this.key, method: 'list', search: '', state: '4'} })\n        .then(response => {\n          this.loading = false\n          if (!response.data.error) {\n            this.fields_info = response.data[0]\n            this.salekey = response.data[0].key\n            this.$root.phone_number = this.fields_info.phone.substr(1)\n            resolve(\"ok\") \n          }               \n        })\n        .catch(error => { console.log(error) })\n      })\n    },\n    validateAll: function(fields) {\n      var noerror = true;\n      for (var index in fields) {\n        if (this.validate(index, fields[index])) {\n          noerror = false\n        }\n      }\n      return noerror\n    },\n    validate: function (field, value) {\n      if (model.validators[field]) {\n        return this.errors[field] = this.validator(model.validators[field], value)\n      }\n    },\n  }\n}\n",{"version":3,"sources":["form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"form.vue","sourceRoot":"src/views/req_av100","sourcesContent":["<template>\n  <div>\n    <div v-if=\"loading\" class=\"loading-block\">\n      <div class=\"loader\"></div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <div v-html=\"text_info\" style=\"overflow: auto; height: 750px;\">\n        </div>\n      </div>\n      <div class=\"col-md-6\">\n        <div v-if=\"fields_about\">\n          <div>Зарегистрирован: <b>{{fields_about.user_register_date}}</b></div> \n          <div>Последний платеж: <b>{{fields_about.user_last_payment}}</b></div> \n          <div>Доступ истек: <b>{{fields_about.user_expire_date == '' ? 'Да' : 'Нет'}}</b></div> \n          <div>Telegram: CHATID=<b>{{fields_about.telegram_chatid}}</b></div> \n          <div>История оплат с сайта</div>\n          <div v-for=\"(el, key) of fields_about.history\" :key=\"key\">\n            <div>{{el.credate}} {{el.comment}}</div>\n          </div>\n          <div><span>Ссылка на оплату: </span>\n          <button class=\"btn btn-secondary\" @click=\"addClipboard(fields_about.paylink)\">{{fields_about.paylink}}</button></div>\n          <hr>\n        </div>\n        <div>Телефон: <b>{{fields_info.phone}}</b></div> \n        <div>Комментарий: <b>{{fields_info.comment}}</b></div> \n        <div>Дата: <b>{{fields_info.credate}}</b></div> \n        <hr>\n\n        <div>\n          <span>{{labels.salestate}}: </span>\n          <span v-for=\"(el, key) of model.salestate\" :key=\"key\" style=\"padding: 0 2px; dispaly: inline-block;\">\n            <input type=\"radio\" :value=\"el.value\" :id=\"'salestate-'+key\" v-model=\"fields.salestate\"><label style=\"padding: 0 2px;\" :for=\"'salestate-'+key\">{{el.text}}</label>\n          </span>\n        </div>\n\n        <div>\n          <span>{{labels.callState}}: </span>\n          <span v-for=\"(el, key) of model.callstate\" :key=\"key\" style=\"padding: 0 2px; dispaly: inline-block;\">\n            <input type=\"radio\" :value=\"el.value\" :id=\"'1-'+key\" v-model=\"fields.callState\"><label style=\"padding: 0 2px;\" :for=\"'1-'+key\">{{el.text}}</label>\n          </span>\n        </div>\n\n        <div>\n          <span>{{labels.clienttype}}: </span>\n          <span v-for=\"(el, key) of model.clienttype\" :key=\"key\" style=\"padding: 0 2px; dispaly: inline-block;\">\n            <input type=\"radio\" :value=\"el.value\" :id=\"'clienttype-'+key\" v-model=\"fields.clienttype\"><label style=\"padding: 0 2px;\" :for=\"'clienttype-'+key\">{{el.text}}</label>\n          </span>\n        </div>\n\n        <div>\n          <span>{{labels.notifytype}}: </span>\n          <span v-for=\"(el, key) of model.notifytype\" :key=\"key\" style=\"padding: 0 2px; dispaly: inline-block;\">\n            <input type=\"checkbox\" :value=\"el.value\" :id=\"'notifytype-'+key\" v-model=\"fields.notifytype\"><label style=\"padding: 0 2px;\" :for=\"'notifytype-'+key\">{{el.text}}</label>\n          </span>\n        </div>\n\n        <v-textarea v-model=\"fields.comment\" :label=\"labels.comment\" v-on:change-model=\"validate('comment', fields.comment)\" :error=\"errors.comment\"></v-textarea>\n        <div class=\"row\">\n          <div class=\"col-6\">\n            <button class=\"btn btn-secondary btn-lg\" style=\"width: 100%; margin: 5px;\" @click=\"sendSMS()\">Послать SMS</button>\n          </div>\n          <div class=\"col-6\">\n            <button class=\"btn btn-secondary btn-lg\" style=\"width: 100%; margin: 5px;\" @click=\"sendTelegam()\">Послать в telegram</button>\n          </div>\n        </div>\n        <div>\n        <div class=\"row\">\n          <div class=\"col-6\">\n            <button class=\"btn btn-secondary btn-lg\" style=\"width: 100%; margin: 5px;\" @click=\"submitAndExit()\">Выйти</button>\n          </div>\n          <div class=\"col-6\">\n            <button class=\"btn btn-success btn-lg\" style=\"width: 100%; margin: 5px;\" @click=\"submitAndNext()\">Следующая заявка</button>\n          </div>\n        </div>\n          <button class=\"btn btn-success btn-lg\" style=\"width: 100%; margin: 5px;\" @click=\"submitAndCall()\">Следующая заявка с автодозвоном</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport BaseText from '@/widgets/inputs/BaseText.vue'\nimport BaseTextarea from '@/widgets/inputs/BaseTextarea.vue'\nimport BaseSelect from '@/widgets/inputs/BaseSelect.vue'\nimport model from '@/models/request_av100.js'\nimport axios from 'axios'\nimport api from '@/config/api'\nimport router from '@/config/router'\nimport mixingValidator from '@/libs/validators'\n\nfunction fallbackCopyTextToClipboard(text) {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Fallback: Copying text command was ' + msg);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n}\n\nexport default {\n  mixins: [mixingValidator],\n  components: {\n    'v-text': BaseText,\n    'v-textarea': BaseTextarea,\n    'v-select': BaseSelect\n  },\n  data: function() {\n    return {\n      model: model,\n      validators: model.validators,\n      labels: model.labels,\n      fields: new model.Fields().fields,\n      errors: new model.Fields().errors,\n      fields_info: new model.FieldsGet().fields,\n      text_info: '',\n      salekey: null,\n      fields_about: null,\n      api: api.av100\n    }\n  },\n  created() {\n    this.genNew()\n  },\n  computed: {\n    key: function() {\n      return this.$store.getters['user/profile'].api_key\n    }\n  },\n  methods: {\n    addClipboard: function(text) {\n      if (!navigator.clipboard) {\n        fallbackCopyTextToClipboard(text);\n        return false;\n      }\n      navigator.clipboard.writeText(text).then(function() {\n        console.log('Async: Copying to clipboard was successful!');\n      }, function(err) {\n        console.error('Async: Could not copy text: ', err);\n      });\n      return false;\n    },\n    genNew: function() {\n      this.fields = new model.Fields().fields\n      this.errors = new model.Fields().errors\n      this.fields_about = null\n      return new Promise((resolve, reject) => {\n        this.getTextInfo()\n        this.fetchData().then(() => { this.getKey().then(() => { this.getAbout().then(()=> { resolve(\"ok\") })  }) })\n      })\n    },\n    getTextInfo: function() {\n      axios\n      .get(api.content, {params: {id: '2' }})\n      .then(response => { this.text_info = response.data.data.content})\n      .catch(error => { console.log(error) })\n    },\n    submitAndNext: function() {\n      if (this.validateAll(this.fields)) {\n        this.sendRequest().then(() => {this.genNew()})\n      }\n      \n    },\n    submitAndExit: function() {\n      if (this.validateAll(this.fields)) {\n        this.sendRequest().then(() => {router.push({ name: 'index' })})\n      }\n    },\n    submitAndCall: function() {\n      if (this.validateAll(this.fields)) {\n        this.sendRequest().then(() => {this.genNew().then(() => { this.$root.$emit('global-call') })})\n      }\n    },\n    fetchData () {\n      return new Promise((resolve, reject) => {\n        this.loading = true\n        axios\n        .get(this.api, {params: {key: this.key, method: 'getsale'} })\n        .then(response => { resolve(\"ok\") })\n        .catch(error => { console.log(error) })\n      })\n    },\n    sendSMS: function() {\n      axios\n        .get(this.api, {params: {key: this.key, method: 'sendsms', salekey: this.salekey} })\n        .then(response => { if (response.data.error) { alert(response.data.msg)}})\n        .catch(error => { console.log(error) })\n    },\n    sendTelegam: function() {\n      axios\n        .get(this.api, {params: {key: this.key, method: 'sendtlg'} })\n        .then(response => { if (response.data.error) { alert(response.data.msg)}})\n        .catch(error => { console.log(error) })\n    },\n    sendRequest: function() {\n      return new Promise((resolve, reject) => {\n        this.loading = true\n        var params = {\n            key: this.key, \n            method: 'process',\n            salekey: this.salekey,\n            salestate: this.fields.salestate,\n            callState:this.fields.callState,\n            notifytype: this.fields.notifytype.join(),\n            clienttype: this.fields.clienttype,\n            comment: this.fields.comment\n            }\n            // console.log(params.notifytype);\n            \n        axios\n          .get(this.api, {params: params})\n          .then(response => { \n            this.loading = false\n            if (response.data.error) { alert(response.data.msg)} \n            else { resolve(\"ok\")  }\n          })\n          .catch(error => { console.log(error) })\n      })\n    },\n    getAbout: function() {\n      return new Promise((resolve, reject) => {\n        this.loading = true\n        axios\n        .get(this.api, {params: {key: this.key, method: 'item', salekey: this.salekey} })\n        .then(response => {\n          this.loading = false\n          if (!response.data.error) {\n            this.fields_about = response.data\n            resolve(\"ok\") \n          }               \n        })\n        .catch(error => { console.log(error) })\n      })\n    },\n    getKey: function() {\n      return new Promise((resolve, reject) => {\n        this.loading = true\n        axios\n        .get(this.api, {params: {key: this.key, method: 'list', search: '', state: '4'} })\n        .then(response => {\n          this.loading = false\n          if (!response.data.error) {\n            this.fields_info = response.data[0]\n            this.salekey = response.data[0].key\n            this.$root.phone_number = this.fields_info.phone.substr(1)\n            resolve(\"ok\") \n          }               \n        })\n        .catch(error => { console.log(error) })\n      })\n    },\n    validateAll: function(fields) {\n      var noerror = true;\n      for (var index in fields) {\n        if (this.validate(index, fields[index])) {\n          noerror = false\n        }\n      }\n      return noerror\n    },\n    validate: function (field, value) {\n      if (model.validators[field]) {\n        return this.errors[field] = this.validator(model.validators[field], value)\n      }\n    },\n  }\n}\n</script>\n"]}]}