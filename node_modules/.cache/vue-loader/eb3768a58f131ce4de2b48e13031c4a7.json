{"remainingRequest":"/home/andrei/dev/vue/crmav100/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andrei/dev/vue/crmav100/src/widgets/phone/caller.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andrei/dev/vue/crmav100/src/widgets/phone/caller.vue","mtime":1555427314253},{"path":"/home/andrei/dev/vue/crmav100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/andrei/dev/vue/crmav100/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n \n\n\nexport default {\n  props: {\n    server: String,\n    password: String,\n    user: String,\n    ws: String\n  },\n  data: function() {\n    return {\n      status: '',\n      muted: false,\n      ua: null,\n      uri: null,\n      canCall: true,\n      canRing: true,\n      session: null,\n      sipCallTimer: null,\n      sipRingTone: null,\n      options: null\n    }\n  },\n  created () {\n    this.$root.$on('global-call', () => {\n      this.startCall()\n    })\n    this.sipRingTone = document.getElementById('sip-ringtone');\n    this.uri = 'sip:'+this.user+'@'+this.server\n    var self = this\n    var socket = new JsSIP.WebSocketInterface(this.ws)\n    socket.via_transport = \"wss\";\n\n    var configuration = {\n        session_timers: false,\n        use_preloaded_route: false,\n        sockets  : [ socket ],\n        uri      : this.uri,\n        password : this.password,\n        realm    : this.server,\n      }\n\n    var eventHandlers = {\n        progress: (e) => { this.status = \"Соединяем\" },     \n        failed: (e) => { this.endCall() },\n        ended: (e) => { this.endCall() },      \n        confirmed: (e) => { this.startTimer() },\n        muted: (e) => { this.muted = true },\n        unmuted: (e) => { this.muted = false},                  \n      }\n      var pcConfig = {\n        rtcpMuxPolicy : 'negotiate',\n        iceServers: [\n            { urls : [\n              'stun:stun.l.google.com:19302',\n              'stun:stun1.l.google.com:19302',\n              'stun:stun2.l.google.com:19302',\n              'stun:stun3.l.google.com:19302',\n              'stun:stun4.l.google.com:19302',\n              ]\n            }\n        ]\n      }\n      this.options = {\n        eventHandlers: eventHandlers,\n        pcConfig : pcConfig,\n        mediaConstraints : { audio: true, video: false },\n        rtcOfferConstraints : { offerToReceiveAudio : 1 }\n      }\n    \n    this.ua = new JsSIP.UA(configuration);\n                \n    this.ua.on('connected', (e) => { this.status = \"Готов\" })\n    this.ua.on('disconnected', (e) => { this.status = \"Нет соединения\" })\n    this.ua.on('registered', (e) => { })\n    this.ua.on('unregistered', (e) => { this.status = \"Не зарегистрирован\" })\n    this.ua.on('registrationFailed', (e) => { this.status = \"Ошибка регистрации\" })\n    this.ua.on('newRTCSession', function (ev) {\n    \n    if (ev.originator === 'local') {\n        var peerconnection = ev.session.connection;\n        peerconnection.addEventListener('addstream', function (e) {\n                document.getElementById(\"audio_remote\").srcObject = e.stream\n        });\n\t    return;\n    }\n  \n    if (!self.canCall) { ev.session.terminate(self.options); return; }\n    if (!self.canRing) { ev.session.terminate(self.options); return; }  \n    //   var s = ev.session;\n    //   self.session = s;       \n    //   redirectURL = '';\n    //   var remoteNumber = ev.request.from.display_name;\n    //   console.log(remoteNumber);\n    //   // $.get('https://crmroyalmotors.ru/index.php?r=auto/manager/get-info&p=' + remoteNumber, function (data) {\n    //   //     redirectURL = data.url;\n    //   //     $('#modal-answer .modal-body').html(data.html);\n    //   // }, 'json');\n    //   this.startRingTone();\n    //   // modalWindow.modal('show');\n                    \n    //   s.on('peerconnection', (p) => {\n    //       p.peerconnection.addEventListener('addstream', function (e) {\n    //           document.getElementById(\"audio_remote\").srcObject = e.stream\n    //       });\n              \n    //   })\n    //   s.on('failed', (e) => {\n    //           this.stopRingTone();\n    //           // modalWindow.modal('hide');\n    //   });\n    //   s.on('accepted', (e) => {\n    //           this.stopRingTone();\n    //           // modalWindow.modal('hide');\n\n\n    //   }); \n    //   s.on('ended', (e) => {\n    //           this.endCall();\n    //   });        \n          \n    });\n    this.ua.start();\n  },\n  watch: {\n    muted: function() {\n      if (this.muted) {\n        this.session.mute()\n      } else {\n        this.session.unmute()\n      }\n    }\n  },\n  methods: {\n    n: function (n) {\n        return n > 9 ? \"\" + n : \"0\" + n;\n    },\n\n    endCall: function() {\n      this.canCall = true\n      clearInterval(this.sipCallTimer)\n      this.ua.terminateSessions()\n      this.session = null\n      this.status = \"Готов\"\n    },\n\n    startTimer: function() {\n      this.status = \"Разговор 00:00\"\n              \n      var start = new Date().getTime()\n      clearInterval(this.sipCallTimer)\n      this.sipCallTimer = setInterval(() => {\n          var now = new Date().getTime()\n          var distance = now - start\n          var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n          var seconds = Math.floor((distance % (1000 * 60)) / 1000)\n          this.status = \"Разговор \"+ this.n(minutes) + ':' + this.n(seconds)\n        }, 1000);\n    },\n\n    startRingTone: function() {\n      try { this.sipRingTone.play() } catch (e) { }\n    },\n\n    stopRingTone :function() {\n      try { this.sipRingTone.pause() } catch (e) { }\n    },\n\n    startCall: function() {\n      if (this.$root.phone_number > 0) {\n        var sip_num = 'sip:'+this.$root.phone_number+'@'+this.server\n        this.session = this.ua.call(sip_num, this.options)\n        this.canCall = false\n      }\n    }\n  }\n}\n\n",{"version":3,"sources":["caller.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"caller.vue","sourceRoot":"src/widgets/phone","sourcesContent":["<template>\n  <div style=\"text-center\">\n    <div class=\"phone\">\n      <div class=\"phone-el\">{{status}}</div>\n      <div class=\"phone-el\"><input type=\"text\" v-model=\"$root.phone_number\" class=\"form-control form-phone\" style=\"width: 190px\"></div>\n      <div class=\"phone-el\">\n        <button class=\"btn btn-default call-btn call-btn-i\" @click=\"canRing = !canRing\" :title=\"canRing ? 'Выключить звонок' : 'Включить звонок'\"><i class=\"fa\" :class=\"canRing ? 'fa-bell' : 'fa-bell-slash'\"></i></button>\n        <button class=\"btn btn-default call-btn call-btn-i\" :disabled=\"!session\" @click=\"muted = !muted\" :title=\"muted ? 'Включить звук' : 'Выключить звук'\"><i class=\"fa\" :class=\"muted ? 'fa-microphone-slash' : 'fa-microphone'\"></i></button>\n        <button v-if=\"canCall\" class=\"btn btn-default call-btn call-btn-start\" @click=\"startCall()\" title=\"Позвонить\"><i class=\"fas fa-phone\"></i></button>\n        <button v-else class=\"btn btn-default call-btn call-btn-stop\" @click=\"endCall()\" title=\"Положить трубку\"><i class=\"fas fa-phone\"></i></button>\n\n      </div>\n    </div>\n    <audio id=\"audio_remote\" autoplay=\"autoplay\"></audio>\n    <audio id=\"sip-ringtone\" loop src=\"/sounds/ringtone.mp3\"></audio>\n  </div>\n</template>\n      \n<script> \n\n\nexport default {\n  props: {\n    server: String,\n    password: String,\n    user: String,\n    ws: String\n  },\n  data: function() {\n    return {\n      status: '',\n      muted: false,\n      ua: null,\n      uri: null,\n      canCall: true,\n      canRing: true,\n      session: null,\n      sipCallTimer: null,\n      sipRingTone: null,\n      options: null\n    }\n  },\n  created () {\n    this.$root.$on('global-call', () => {\n      this.startCall()\n    })\n    this.sipRingTone = document.getElementById('sip-ringtone');\n    this.uri = 'sip:'+this.user+'@'+this.server\n    var self = this\n    var socket = new JsSIP.WebSocketInterface(this.ws)\n    socket.via_transport = \"wss\";\n\n    var configuration = {\n        session_timers: false,\n        use_preloaded_route: false,\n        sockets  : [ socket ],\n        uri      : this.uri,\n        password : this.password,\n        realm    : this.server,\n      }\n\n    var eventHandlers = {\n        progress: (e) => { this.status = \"Соединяем\" },     \n        failed: (e) => { this.endCall() },\n        ended: (e) => { this.endCall() },      \n        confirmed: (e) => { this.startTimer() },\n        muted: (e) => { this.muted = true },\n        unmuted: (e) => { this.muted = false},                  \n      }\n      var pcConfig = {\n        rtcpMuxPolicy : 'negotiate',\n        iceServers: [\n            { urls : [\n              'stun:stun.l.google.com:19302',\n              'stun:stun1.l.google.com:19302',\n              'stun:stun2.l.google.com:19302',\n              'stun:stun3.l.google.com:19302',\n              'stun:stun4.l.google.com:19302',\n              ]\n            }\n        ]\n      }\n      this.options = {\n        eventHandlers: eventHandlers,\n        pcConfig : pcConfig,\n        mediaConstraints : { audio: true, video: false },\n        rtcOfferConstraints : { offerToReceiveAudio : 1 }\n      }\n    \n    this.ua = new JsSIP.UA(configuration);\n                \n    this.ua.on('connected', (e) => { this.status = \"Готов\" })\n    this.ua.on('disconnected', (e) => { this.status = \"Нет соединения\" })\n    this.ua.on('registered', (e) => { })\n    this.ua.on('unregistered', (e) => { this.status = \"Не зарегистрирован\" })\n    this.ua.on('registrationFailed', (e) => { this.status = \"Ошибка регистрации\" })\n    this.ua.on('newRTCSession', function (ev) {\n    \n    if (ev.originator === 'local') {\n        var peerconnection = ev.session.connection;\n        peerconnection.addEventListener('addstream', function (e) {\n                document.getElementById(\"audio_remote\").srcObject = e.stream\n        });\n\t    return;\n    }\n  \n    if (!self.canCall) { ev.session.terminate(self.options); return; }\n    if (!self.canRing) { ev.session.terminate(self.options); return; }  \n    //   var s = ev.session;\n    //   self.session = s;       \n    //   redirectURL = '';\n    //   var remoteNumber = ev.request.from.display_name;\n    //   console.log(remoteNumber);\n    //   // $.get('https://crmroyalmotors.ru/index.php?r=auto/manager/get-info&p=' + remoteNumber, function (data) {\n    //   //     redirectURL = data.url;\n    //   //     $('#modal-answer .modal-body').html(data.html);\n    //   // }, 'json');\n    //   this.startRingTone();\n    //   // modalWindow.modal('show');\n                    \n    //   s.on('peerconnection', (p) => {\n    //       p.peerconnection.addEventListener('addstream', function (e) {\n    //           document.getElementById(\"audio_remote\").srcObject = e.stream\n    //       });\n              \n    //   })\n    //   s.on('failed', (e) => {\n    //           this.stopRingTone();\n    //           // modalWindow.modal('hide');\n    //   });\n    //   s.on('accepted', (e) => {\n    //           this.stopRingTone();\n    //           // modalWindow.modal('hide');\n\n\n    //   }); \n    //   s.on('ended', (e) => {\n    //           this.endCall();\n    //   });        \n          \n    });\n    this.ua.start();\n  },\n  watch: {\n    muted: function() {\n      if (this.muted) {\n        this.session.mute()\n      } else {\n        this.session.unmute()\n      }\n    }\n  },\n  methods: {\n    n: function (n) {\n        return n > 9 ? \"\" + n : \"0\" + n;\n    },\n\n    endCall: function() {\n      this.canCall = true\n      clearInterval(this.sipCallTimer)\n      this.ua.terminateSessions()\n      this.session = null\n      this.status = \"Готов\"\n    },\n\n    startTimer: function() {\n      this.status = \"Разговор 00:00\"\n              \n      var start = new Date().getTime()\n      clearInterval(this.sipCallTimer)\n      this.sipCallTimer = setInterval(() => {\n          var now = new Date().getTime()\n          var distance = now - start\n          var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))\n          var seconds = Math.floor((distance % (1000 * 60)) / 1000)\n          this.status = \"Разговор \"+ this.n(minutes) + ':' + this.n(seconds)\n        }, 1000);\n    },\n\n    startRingTone: function() {\n      try { this.sipRingTone.play() } catch (e) { }\n    },\n\n    stopRingTone :function() {\n      try { this.sipRingTone.pause() } catch (e) { }\n    },\n\n    startCall: function() {\n      if (this.$root.phone_number > 0) {\n        var sip_num = 'sip:'+this.$root.phone_number+'@'+this.server\n        this.session = this.ua.call(sip_num, this.options)\n        this.canCall = false\n      }\n    }\n  }\n}\n\n</script>\n\n<style lang=\"scss\" scope>\n.phone {\n  .form-phone {\n    font-size: 20px;\n    height: 30px;\n    border-radius: 2px;\n  }\n  .phone-el {\n    display: inline-block;\n    margin: 0 5px;\n  }\n  .btn {\n    display: inline-block;\n  }\n  .call-btn-start {\n    background: #02b302;\n  }\n  .call-btn-stop {\n    background: #dc3545;\n  }\n  .call-btn {\n    border-radius: 50%;\n    height: 32px;\n    width: 32px;\n    margin: 2px;\n    padding: 0;\n  }\n  .call-btn-i {\n    background: #aaa;\n  }\n}\n</style>\n"]}]}