<template>
  <div>
    <div v-if="loading" class="loading-block">
      <div class="loader"></div>
    </div>
    <div class="row">
      <div class="col-md-6">
        <div v-html="text_info" style="overflow: auto; height: 750px;">
        </div>
      </div>
      <div class="col-md-6">
        <div v-if="fields_about">
          <div>Зарегистрирован: <b>{{fields_about.user_register_date}}</b></div> 
          <div>Последний платеж: <b>{{fields_about.user_last_payment}}</b></div> 
          <div>Доступ истек: <b>{{fields_about.user_expire_date == '' ? 'Да' : 'Нет'}}</b></div> 
          <div>Telegram: CHATID=<b>{{fields_about.telegram_chatid}}</b></div> 
          <div>История оплат с сайта</div>
          <div v-for="(el, key) of fields_about.history" :key="key">
            <div>{{el.credate}} {{el.comment}}</div>
          </div>
          <div><span>Ссылка на оплату: </span>
          <button class="btn btn-secondary" @click="addClipboard(fields_about.paylink)">{{fields_about.paylink}}</button></div>
          <hr>
        </div>
        <div>Телефон: <b>{{fields_info.phone}}</b></div> 
        <div>Комментарий: <b>{{fields_info.comment}}</b></div> 
        <div>Дата: <b>{{fields_info.credate}}</b></div> 
        <hr>

        <div>
          <span>{{labels.salestate}}: </span>
          <span v-for="(el, key) of model.salestate" :key="key" style="padding: 0 2px; dispaly: inline-block;">
            <input type="radio" :value="el.value" :id="'salestate-'+key" v-model="fields.salestate"><label style="padding: 0 2px;" :for="'salestate-'+key">{{el.text}}</label>
          </span>
        </div>

        <div>
          <span>{{labels.callState}}: </span>
          <span v-for="(el, key) of model.callstate" :key="key" style="padding: 0 2px; dispaly: inline-block;">
            <input type="radio" :value="el.value" :id="'1-'+key" v-model="fields.callState"><label style="padding: 0 2px;" :for="'1-'+key">{{el.text}}</label>
          </span>
        </div>

        <div>
          <span>{{labels.clienttype}}: </span>
          <span v-for="(el, key) of model.clienttype" :key="key" style="padding: 0 2px; dispaly: inline-block;">
            <input type="radio" :value="el.value" :id="'clienttype-'+key" v-model="fields.clienttype"><label style="padding: 0 2px;" :for="'clienttype-'+key">{{el.text}}</label>
          </span>
        </div>

        <div>
          <span>{{labels.notifytype}}: </span>
          <span v-for="(el, key) of model.notifytype" :key="key" style="padding: 0 2px; dispaly: inline-block;">
            <input type="checkbox" :value="el.value" :id="'notifytype-'+key" v-model="fields.notifytype"><label style="padding: 0 2px;" :for="'notifytype-'+key">{{el.text}}</label>
          </span>
        </div>

        <v-textarea v-model="fields.comment" :label="labels.comment" v-on:change-model="validate('comment', fields.comment)" :error="errors.comment"></v-textarea>
        <div class="row">
          <div class="col-6">
            <button class="btn btn-secondary btn-lg" style="width: 100%; margin: 5px;" @click="sendSMS()">Послать SMS</button>
          </div>
          <div class="col-6">
            <button class="btn btn-secondary btn-lg" style="width: 100%; margin: 5px;" @click="sendTelegam()">Послать в telegram</button>
          </div>
        </div>
        <div>
        <div class="row">
          <div class="col-6">
            <button class="btn btn-secondary btn-lg" style="width: 100%; margin: 5px;" @click="submitAndExit()">Выйти</button>
          </div>
          <div class="col-6">
            <button class="btn btn-success btn-lg" style="width: 100%; margin: 5px;" @click="submitAndNext()">Следующая заявка</button>
          </div>
        </div>
          <button class="btn btn-success btn-lg" style="width: 100%; margin: 5px;" @click="submitAndCall()">Следующая заявка с автодозвоном</button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import BaseText from '@/widgets/inputs/BaseText.vue'
import BaseTextarea from '@/widgets/inputs/BaseTextarea.vue'
import BaseSelect from '@/widgets/inputs/BaseSelect.vue'
import model from '@/models/request_av100.js'
import axios from 'axios'
import api from '@/config/api'
import router from '@/config/router'
import mixingValidator from '@/libs/validators'

function fallbackCopyTextToClipboard(text) {
  var textArea = document.createElement("textarea");
  textArea.value = text;
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  try {
    var successful = document.execCommand('copy');
    var msg = successful ? 'successful' : 'unsuccessful';
    console.log('Fallback: Copying text command was ' + msg);
  } catch (err) {
    console.error('Fallback: Oops, unable to copy', err);
  }

  document.body.removeChild(textArea);
}

export default {
  mixins: [mixingValidator],
  components: {
    'v-text': BaseText,
    'v-textarea': BaseTextarea,
    'v-select': BaseSelect
  },
  data: function() {
    return {
      model: model,
      validators: model.validators,
      labels: model.labels,
      fields: new model.Fields().fields,
      errors: new model.Fields().errors,
      fields_info: new model.FieldsGet().fields,
      text_info: '',
      salekey: null,
      fields_about: null,
      api: api.av100
    }
  },
  created() {
    this.genNew()
  },
  computed: {
    key: function() {
      return this.$store.getters['user/profile'].api_key
    }
  },
  methods: {
    addClipboard: function(text) {
      if (!navigator.clipboard) {
        fallbackCopyTextToClipboard(text);
        return false;
      }
      navigator.clipboard.writeText(text).then(function() {
        console.log('Async: Copying to clipboard was successful!');
      }, function(err) {
        console.error('Async: Could not copy text: ', err);
      });
      return false;
    },
    genNew: function() {
      this.fields = new model.Fields().fields
      this.errors = new model.Fields().errors
      this.fields_about = null
      return new Promise((resolve, reject) => {
        this.getTextInfo()
        this.fetchData().then(() => { this.getKey().then(() => { this.getAbout().then(()=> { resolve("ok") })  }) })
      })
    },
    getTextInfo: function() {
      axios
      .get(api.content, {params: {id: '2' }})
      .then(response => { this.text_info = response.data.data.content})
      .catch(error => { console.log(error) })
    },
    submitAndNext: function() {
      if (this.validateAll(this.fields)) {
        this.sendRequest().then(() => {this.genNew()})
      }
      
    },
    submitAndExit: function() {
      if (this.validateAll(this.fields)) {
        this.sendRequest().then(() => {router.push({ name: 'index' })})
      }
    },
    submitAndCall: function() {
      if (this.validateAll(this.fields)) {
        this.sendRequest().then(() => {this.genNew().then(() => { this.$root.$emit('global-call') })})
      }
    },
    fetchData () {
      return new Promise((resolve, reject) => {
        this.loading = true
        axios
        .get(this.api, {params: {key: this.key, method: 'getsale'} })
        .then(response => { resolve("ok") })
        .catch(error => { console.log(error) })
      })
    },
    sendSMS: function() {
      axios
        .get(this.api, {params: {key: this.key, method: 'sendsms', salekey: this.salekey} })
        .then(response => { if (response.data.error) { alert(response.data.msg)}})
        .catch(error => { console.log(error) })
    },
    sendTelegam: function() {
      axios
        .get(this.api, {params: {key: this.key, method: 'sendtlg'} })
        .then(response => { if (response.data.error) { alert(response.data.msg)}})
        .catch(error => { console.log(error) })
    },
    sendRequest: function() {
      return new Promise((resolve, reject) => {
        this.loading = true
        var params = {
            key: this.key, 
            method: 'process',
            salekey: this.salekey,
            salestate: this.fields.salestate,
            callState:this.fields.callState,
            notifytype: this.fields.notifytype.join(),
            clienttype: this.fields.clienttype,
            comment: this.fields.comment
            }
            // console.log(params.notifytype);
            
        axios
          .get(this.api, {params: params})
          .then(response => { 
            this.loading = false
            if (response.data.error) { alert(response.data.msg)} 
            else { resolve("ok")  }
          })
          .catch(error => { console.log(error) })
      })
    },
    getAbout: function() {
      return new Promise((resolve, reject) => {
        this.loading = true
        axios
        .get(this.api, {params: {key: this.key, method: 'item', salekey: this.salekey} })
        .then(response => {
          this.loading = false
          if (!response.data.error) {
            this.fields_about = response.data
            resolve("ok") 
          }               
        })
        .catch(error => { console.log(error) })
      })
    },
    getKey: function() {
      return new Promise((resolve, reject) => {
        this.loading = true
        axios
        .get(this.api, {params: {key: this.key, method: 'list', search: '', state: '4'} })
        .then(response => {
          this.loading = false
          if (!response.data.error) {
            this.fields_info = response.data[0]
            this.salekey = response.data[0].key
            this.$root.phone_number = this.fields_info.phone.substr(1)
            resolve("ok") 
          }               
        })
        .catch(error => { console.log(error) })
      })
    },
    validateAll: function(fields) {
      var noerror = true;
      for (var index in fields) {
        if (this.validate(index, fields[index])) {
          noerror = false
        }
      }
      return noerror
    },
    validate: function (field, value) {
      if (model.validators[field]) {
        return this.errors[field] = this.validator(model.validators[field], value)
      }
    },
  }
}
</script>
